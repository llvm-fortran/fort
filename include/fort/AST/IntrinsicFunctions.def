//=== IntrinsicFunctions.def - Fortran Family Intrinsic function Database ===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the Intrinsic function database.
//
//===----------------------------------------------------------------------===//

#ifndef NUM_ARGS_1
#define NUM_ARGS_1
#endif

#ifndef NUM_ARGS_2
#define NUM_ARGS_2
#endif

#ifndef NUM_ARGS_3
#define NUM_ARGS_3
#endif

#ifndef NUM_ARGS_1_OR_2
#define NUM_ARGS_1_OR_2
#endif

#ifndef NUM_ARGS_2_OR_MORE
#define NUM_ARGS_2_OR_MORE
#endif

#ifndef INTRINSIC_FUNCTION
#define INTRINSIC_FUNCTION(NAME, GENERICNAME, NUMARGS, VERSION)
#endif

/// EXP -> EXP, DEXP
#define INTRINSIC_FUNCTION_ADD_D_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NAME, NUMARGS, VERSION)

/// EXP -> EXP, DEXP, CEXP
#define INTRINSIC_FUNCTION_ADD_DC_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(C##NAME, NAME, NUMARGS, VERSION)

/// EXP -> EXP, AEXP, DEXP, CEXP
#define INTRINSIC_FUNCTION_ADD_ADC_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(A##NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(C##NAME, NAME, NUMARGS, VERSION)

/// EXP -> EXP, AEXP, DEXP
#define INTRINSIC_FUNCTION_ADD_AD_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(A##NAME, NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NAME, NUMARGS, VERSION)

#ifndef INTRINSIC_GROUP
#define INTRINSIC_GROUP(NAME, FIRST, LAST)
#endif

//
// Argument count flags allowed:
//   NUM_ARGS_1 - The function accepts only one argument.
//   NUM_ARGS_2 - The function accepts only two arguments.
//   NUM_ARGS_1_OR_2 - The function accepts only one or two arguments.
//   NUM_ARGS_2_OR_MORE - The function accepts two or more arguments.
//
// Version flags allowed:
//   FUNALL    - This is an intrinsic functions in all variants of Fortran.
//   FUNNOTF77 - This is an intrinsic functions  keyword for all variants of Fortran except 77.
//   FUNF77    - This is an intrinsic functions  keyword for Fortran 77.
//   FUNF90    - This is an intrinsic functions  keyword for Fortran 90.
//   FUNF95    - This is an intrinsic functions  keyword for Fortran 90/95.
//   FUNF2003  - This is an intrinsic functions  keyword for Fortran 2003.
//   FUNF2008  - This is an intrinsic functions  keyword for Fortran 2003/2008.
//

//
// Conversion group
//

INTRINSIC_FUNCTION(INT, INT, NUM_ARGS_1_OR_2, FUNALL)
INTRINSIC_FUNCTION(IFIX, INT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IDINT, INT, NUM_ARGS_1, FUNALL)

INTRINSIC_FUNCTION(REAL, REAL, NUM_ARGS_1_OR_2, FUNALL)
INTRINSIC_FUNCTION(FLOAT, REAL, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(SNGL, REAL, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DBLE, REAL, NUM_ARGS_1, FUNALL)

INTRINSIC_FUNCTION(CMPLX, CMPLX, NUM_ARGS_1_OR_2, FUNALL)
INTRINSIC_FUNCTION(DCMPLX, CMPLX, NUM_ARGS_1_OR_2, FUNALL) // FIXME: is that a standard overload?

INTRINSIC_FUNCTION(ICHAR, ICHAR,  NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CHAR, CHAR, NUM_ARGS_1, FUNALL)

INTRINSIC_GROUP(CONVERSION, INT, CHAR)

//
// Truncation/rounding/floor/ceil group
//

// truncation of real
INTRINSIC_FUNCTION(AINT, AINT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DINT, AINT, NUM_ARGS_1, FUNALL)

// nearest whole number
INTRINSIC_FUNCTION(ANINT, ANINT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DNINT, ANINT, NUM_ARGS_1, FUNALL)

// Nearest integer
INTRINSIC_FUNCTION(NINT, NINT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IDNINT, NINT, NUM_ARGS_1, FUNALL)

INTRINSIC_FUNCTION(CEILING, CEILING, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(FLOOR, FLOOR, NUM_ARGS_1, FUNNOTF77)

INTRINSIC_GROUP(TRUNCATION, AINT, FLOOR)

//
// No group
//


//
// Complex numbers group
//

INTRINSIC_FUNCTION(AIMAG, AIMAG, NUM_ARGS_1, FUNALL) // imaginary part of complex
INTRINSIC_FUNCTION(DIMAG, AIMAG, NUM_ARGS_1, FUNALL) // FIXME: is that a standard overload?
INTRINSIC_FUNCTION(CONJG, CONJG, NUM_ARGS_1, FUNALL) // conjugate of complex
INTRINSIC_FUNCTION(DCONJG, CONJG, NUM_ARGS_1, FUNALL) // FIXME: is that a standard overload?

INTRINSIC_GROUP(COMPLEX, AIMAG, DCONJG)

//
// Maths group
//

// Absolute value
INTRINSIC_FUNCTION(ABS, ABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IABS, ABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DABS, ABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CABS, ABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CDABS, ABS, NUM_ARGS_1, FUNALL) // FIXME: is that a standard overload?

// Remainder
INTRINSIC_FUNCTION(MOD, MOD, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(AMOD, MOD, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(DMOD, MOD, NUM_ARGS_2, FUNALL)

// Sign
INTRINSIC_FUNCTION(SIGN, SIGN, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(ISIGN, SIGN, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(DSIGN, SIGN, NUM_ARGS_2, FUNALL)

// Positive difference
INTRINSIC_FUNCTION(DIM, DIM, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(IDIM, DIM, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(DDIM, DIM, NUM_ARGS_2, FUNALL)

// real * real => double prec
INTRINSIC_FUNCTION(DPROD, DPROD, NUM_ARGS_2, FUNALL)

INTRINSIC_FUNCTION(MAX, MAX, NUM_ARGS_2_OR_MORE, FUNALL)
INTRINSIC_FUNCTION(MAX0, MAX, NUM_ARGS_2_OR_MORE, FUNALL) //int->int
INTRINSIC_FUNCTION(AMAX1, MAX, NUM_ARGS_2_OR_MORE, FUNALL) //real->real
INTRINSIC_FUNCTION(DMAX1, MAX, NUM_ARGS_2_OR_MORE, FUNALL) //double->double
INTRINSIC_FUNCTION(AMAX0, MAX, NUM_ARGS_2_OR_MORE, FUNALL) //int->real
INTRINSIC_FUNCTION(MAX1, MAX, NUM_ARGS_2_OR_MORE, FUNALL) //real->int

INTRINSIC_FUNCTION(MIN, MIN, NUM_ARGS_2_OR_MORE, FUNALL)
INTRINSIC_FUNCTION(MIN0, MIN, NUM_ARGS_2_OR_MORE, FUNALL) //int->int
INTRINSIC_FUNCTION(AMIN1, MIN, NUM_ARGS_2_OR_MORE, FUNALL) //real->real
INTRINSIC_FUNCTION(DMIN1, MIN, NUM_ARGS_2_OR_MORE, FUNALL) //double->double
INTRINSIC_FUNCTION(AMIN0, MIN, NUM_ARGS_2_OR_MORE, FUNALL) //int->real
INTRINSIC_FUNCTION(MIN1, MIN, NUM_ARGS_2_OR_MORE, FUNALL) //real->int

INTRINSIC_FUNCTION_ADD_DC_PREFIX(SQRT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(EXP, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_ADC_PREFIX(LOG, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_AD_PREFIX(LOG10, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(SIN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(COS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(TAN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ASIN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ACOS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ATAN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ATAN2, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(SINH, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(COSH, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(TANH, NUM_ARGS_1, FUNALL)

INTRINSIC_GROUP(MATHS, ABS, TANH)

//
// Character group
//

INTRINSIC_FUNCTION(LEN, LEN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(LEN_TRIM, LEN_TRIM, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(INDEX, INDEX, NUM_ARGS_2, FUNALL) // location of substring a in b

// lexical comparison
INTRINSIC_FUNCTION(LGE, LGE, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(LGT, LGT, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(LLE, LLE, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(LLT, LLT, NUM_ARGS_2, FUNALL)

INTRINSIC_GROUP(CHARACTER, LEN, LLT)

//
// Array group
//

INTRINSIC_FUNCTION(MAXLOC, MAXLOC, NUM_ARGS_1_OR_2, FUNNOTF77)
INTRINSIC_FUNCTION(MINLOC, MINLOC, NUM_ARGS_1_OR_2, FUNNOTF77)

INTRINSIC_GROUP(ARRAY, MAXLOC, MINLOC)

//
// Numeric inquiry group
//

#ifdef HUGE
  #undef HUGE
#endif

INTRINSIC_FUNCTION(RADIX, RADIX, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(DIGITS, DIGITS, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(MINEXPONENT, MINEXPONENT, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(MAXEXPONENT, MAXEXPONENT, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(PRECISION, PRECISION, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(RANGE, RANGE, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(HUGE, HUGE, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(TINY, TINY, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(EPSILON, EPSILON, NUM_ARGS_1, FUNNOTF77)

INTRINSIC_GROUP(NUMERIC_INQUIRY, RADIX, EPSILON)

//
// System group
//

#ifdef ETIME
  #undef ETIME
#endif
INTRINSIC_FUNCTION(ETIME, ETIME, NUM_ARGS_1, FUNNOTF77)

INTRINSIC_GROUP(SYSTEM, ETIME, ETIME)

//
// Inquiry group
// Most of the functions in the inquiry group can be evaluated
// at compile time.
//

INTRINSIC_FUNCTION(KIND, KIND, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(SELECTED_INT_KIND, SELECTED_INT_KIND, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(SELECTED_REAL_KIND, SELECTED_REAL_KIND, NUM_ARGS_1_OR_2, FUNNOTF77)
INTRINSIC_FUNCTION(BIT_SIZE, BIT_SIZE, NUM_ARGS_1, FUNNOTF77)

INTRINSIC_GROUP(INQUIRY, KIND, BIT_SIZE)

//
// Bit operations group
//

INTRINSIC_FUNCTION(BTEST, BTEST, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(IAND, IAND, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(IBCLR, IBCLR, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(IBITS, IBITS, NUM_ARGS_3, FUNNOTF77)
INTRINSIC_FUNCTION(IBSET, IBSET, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(IEOR, IEOR, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(IOR, IOR, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(ISHFT, ISHFT, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(ISHFTC, ISHFTC, NUM_ARGS_2, FUNNOTF77)
INTRINSIC_FUNCTION(NOT, NOT, NUM_ARGS_1, FUNNOTF77)

INTRINSIC_GROUP(BITOPS, BTEST, NOT)

#undef INTRINSIC_GROUP

#undef INTRINSIC_FUNCTION_ADD_D_PREFIX
#undef INTRINSIC_FUNCTION_ADD_DC_PREFIX
#undef INTRINSIC_FUNCTION_ADD_AD_PREFIX
#undef INTRINSIC_FUNCTION_ADD_ADC_PREFIX
#undef INTRINSIC_FUNCTION

#undef NUM_ARGS_2_OR_MORE
#undef NUM_ARGS_1_OR_2
#undef NUM_ARGS_2
#undef NUM_ARGS_1
