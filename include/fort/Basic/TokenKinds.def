//===--- TokenKinds.def - Fortran Family Token Kind Database ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the TokenKind database. This includes normal tokens like
// tok::amp (corresponding to the & token) as well as keywords for various
// languages.  Users of this file must optionally #define the TOK or KEYWORD
// macros to make use of this file.
//
//===----------------------------------------------------------------------===//

#ifndef TOK
#define TOK(X)
#endif
#ifndef PUNCTUATOR
#define PUNCTUATOR(X,Y) TOK(X)
#endif
#ifndef KEYWORD
#define KEYWORD(X,Y) TOK(kw_ ## X)
#endif
#ifndef FORMAT_SPEC
#define FORMAT_SPEC(X, Y) TOK(fs_ ## X)
#endif
#ifndef OPERATOR
#define OPERATOR(X,Y) TOK(kw_ ## X)
#endif

//===----------------------------------------------------------------------===//
// Language keywords.
//===----------------------------------------------------------------------===//

// These define members of the tok::* namespace.

TOK(error)               // Error occurred.
TOK(unknown)             // Not a token.
TOK(eof)                 // End of file.

// [FIXME]: Comments.
TOK(comment)             // Comment (only in -E -C[C] mode)

// [FIXME]: Identifiers.
TOK(identifier)          // abcde123

TOK(format_descriptor) // I2, A, 8X, etc

// [R312]: Statement Labels
TOK(statement_label)     // 12345

// [R406]: Signed Integer Literal Constants
TOK(int_literal_constant)  // -927

// [R412]: Signed Real Literal Constants
TOK(real_literal_constant) // +37.927e42
TOK(double_precision_literal_constant) // +42.96D3

TOK(binary_boz_constant) // B"0100"
TOK(octal_boz_constant)  // O"7231"
TOK(hex_boz_constant)    // Z"927A"

// [FIXME]: Character Literal Constants
TOK(char_literal_constant) // "foo", 'foo', 'a'

// [R723]: Defined Operators.
TOK(defined_operator)    // .FOO., .BAR.

// [R424]: Logical Literal Constants
TOK(logical_literal_constant) // .TRUE., .FALSE.

// [R309]: Intrinsic Operator
TOK(intrinsic_operator)  // .EQ., .NE., ...

// Punctuators.
PUNCTUATOR(equal,               "=")
PUNCTUATOR(equalequal,          "==")
PUNCTUATOR(equalgreater,        "=>")
PUNCTUATOR(plus,                "+")
PUNCTUATOR(minus,               "-")
PUNCTUATOR(star,                "*")
PUNCTUATOR(starstar,            "**")
PUNCTUATOR(slash,               "/")
PUNCTUATOR(slashslash,          "//")
PUNCTUATOR(slashequal,          "/=")
PUNCTUATOR(backslash,           "\\")
PUNCTUATOR(l_parenslash,        "(/")
PUNCTUATOR(slashr_paren,        "/)")
PUNCTUATOR(l_paren,             "(")
PUNCTUATOR(r_paren,             ")")
PUNCTUATOR(l_square,            "[")
PUNCTUATOR(r_square,            "]")
PUNCTUATOR(l_brace,             "{")
PUNCTUATOR(r_brace,             "}")
PUNCTUATOR(comma,               ",")
PUNCTUATOR(period,              ".")
PUNCTUATOR(colon,               ":")
PUNCTUATOR(coloncolon,          "::")
PUNCTUATOR(semicolon,           ";")
PUNCTUATOR(exclaim,             "!")
PUNCTUATOR(percent,             "%")
PUNCTUATOR(ampersand,           "&")
PUNCTUATOR(tilde,               "~")
PUNCTUATOR(less,                "<")
PUNCTUATOR(lessequal,           "<=")
PUNCTUATOR(greater,             ">")
PUNCTUATOR(greaterequal,        ">=")
PUNCTUATOR(question,            "?")
PUNCTUATOR(backtick,            "`")
PUNCTUATOR(caret,               "^")
PUNCTUATOR(pipe,                "|")
PUNCTUATOR(dollar,              "$")
PUNCTUATOR(hash,                "#")
PUNCTUATOR(at,                  "@")

// [FIXME]: Keywords. These turn into kw_* tokens. All keywords may be
// redefined. So these are `keywords' only in a context where they need to be a
// keyword.
//
// Flags allowed:
//   KEYALL    - This is a keyword in all variants of Fortran.
//   KEYNOTF77 - This is a keyword for all variants of Fortran except 77.
//   KEYF77    - This is a keyword for Fortran 77.
//   KEYF90    - This is a keyword for Fortran 90.
//   KEYF95    - This is a keyword for Fortran 90/95.
//   KEYF2003  - This is a keyword for Fortran 2003.
//   KEYF2008  - This is a keyword for Fortran 2003/2008.
//

KEYWORD(INCLUDE                , KEYALL)
KEYWORD(PROGRAM                , KEYALL)
KEYWORD(END                    , KEYALL)
KEYWORD(IF           , KEYALL)
KEYWORD(THEN                   , KEYALL)
KEYWORD(ELSE                   , KEYALL)
KEYWORD(DO                     , KEYALL)
KEYWORD(WHILE        , KEYALL)
KEYWORD(INTEGER                , KEYALL)
KEYWORD(CHARACTER              , KEYALL)
KEYWORD(BYTE                   , KEYALL)
KEYWORD(REAL                   , KEYALL) // A function based on context.
KEYWORD(DOUBLE                 , KEYALL)
KEYWORD(PRECISION              , KEYALL)
KEYWORD(COMPLEX                , KEYALL)
KEYWORD(LOGICAL                , KEYALL)

KEYWORD(ASSOCIATE              , KEYALL)
KEYWORD(FILE                   , KEYALL)
KEYWORD(SUBROUTINE             , KEYALL)
KEYWORD(FUNCTION               , KEYALL)
KEYWORD(INTERFACE              , KEYALL)
KEYWORD(SUBPROGRAM             , KEYALL)
KEYWORD(SELECT                 , KEYALL)
KEYWORD(CASE                   , KEYALL)
KEYWORD(IN                     , KEYALL)
KEYWORD(OUT                    , KEYALL)
KEYWORD(ASSIGN                 , KEYALL)
KEYWORD(GO                     , KEYALL)
KEYWORD(TO                     , KEYALL)
KEYWORD(ENTRY                  , KEYALL)
KEYWORD(RETURN                 , KEYALL)
KEYWORD(CALL                   , KEYALL)
KEYWORD(ENUM                   , KEYALL)
KEYWORD(MODULE                 , KEYNOTF77)
KEYWORD(CONTAINS               , KEYNOTF77)
KEYWORD(SUBMODULE              , KEYNOTF77)
KEYWORD(BLOCK                  , KEYALL) // DATA defined below.
KEYWORD(CYCLE                  , KEYNOTF77)
KEYWORD(EXIT                   , KEYNOTF77)
KEYWORD(RECURSIVE              , KEYNOTF77)
KEYWORD(RESULT                 , KEYNOTF77)

KEYWORD(CLASS                  , KEYNOTF77) // [5.2]    declaration-type-spec
KEYWORD(TYPE                   , KEYNOTF77) //   ''
KEYWORD(SEQUENCE               , KEYNOTF77)

KEYWORD(ACCESS                 , KEYALL)    // [5.2.1]  access-stmt
KEYWORD(ALLOCATABLE            , KEYNOTF77) // [5.2.2]  allocatable-stmt
KEYWORD(ASYNCHRONOUS           , KEYF90)    // [5.2.3]  asynchronous-stmt
KEYWORD(BIND                   , KEYALL)    // [5.2.4]  bind-stmt
KEYWORD(CODIMENSION            , KEYF2008)  // [.......]
KEYWORD(CONTIGUOUS             , KEYF2008)  // [.......]
KEYWORD(DATA                   , KEYALL)    // [5.2.5]  data-stmt
KEYWORD(DIMENSION              , KEYALL)    // [5.2.6]  dimension-stmt
KEYWORD(INTENT                 , KEYALL)    // [5.2.7]  intent-stmt
KEYWORD(OPTIONAL               , KEYALL)    // [5.2.8]  optional-stmt
KEYWORD(PARAMETER              , KEYALL)    // [5.2.9]  parameter-stmt
KEYWORD(POINTER                , KEYNOTF77) // [5.2.10] pointer-stmt
KEYWORD(PROTECTED              , KEYNOTF77) // [5.2.11] protected-stmt
KEYWORD(SAVE                   , KEYALL)    // [5.2.12] save-stmt
KEYWORD(STRUCTURE              , KEYF77)
KEYWORD(MAP                    , KEYF77)
KEYWORD(UNION                  , KEYF77)
KEYWORD(RECORD                 , KEYF77)
KEYWORD(TARGET                 , KEYALL)    // [5.2.13] target-stmt
KEYWORD(VALUE                  , KEYALL)    // [5.2.14] value-stmt
KEYWORD(VOLATILE               , KEYALL)    // [5.2.15] volatile-stmt

KEYWORD(PUBLIC                 , KEYALL)    // [5.1.2.1] access-spec
KEYWORD(PRIVATE                , KEYALL)    //    ''

KEYWORD(IMPLICIT               , KEYALL)    // [5.3]    implicit-stmt
KEYWORD(NONE                   , KEYALL)    //   ''
KEYWORD(NAMELIST               , KEYALL)    // [5.4]    namelist-stmt
KEYWORD(EQUIVALENCE            , KEYALL)    // [5.5.1]  equivalence-stmt
KEYWORD(COMMON                 , KEYALL)    // [5.5.2]  common-stmt

KEYWORD(ALLOCATE               , KEYNOTF77) // [6.3.1]  allocate-stmt
KEYWORD(STAT                   , KEYNOTF77) //   ''
KEYWORD(ERRMSG                 , KEYNOTF77) //   ''
KEYWORD(SOURCE                 , KEYNOTF77) //   ''
KEYWORD(NULLIFY                , KEYNOTF77) // [6.3.2]  nullify-stmt
KEYWORD(DEALLOCATE             , KEYNOTF77) // [6.3.3]  deallocate-stmt

KEYWORD(WHERE                  , KEYALL)    // [7.4.3.1] where-stmt

KEYWORD(FORALL                 , KEYNOTF77) // [7.4.4]  forall-construct

KEYWORD(FORMAT                 , KEYALL)

KEYWORD(OPERATOR               , KEYNOTF77) // [12.7.7] generic-spec

KEYWORD(USE                    , KEYALL)    // [11.2.1] use-stmt
KEYWORD(ONLY                   , KEYALL)    // [11.2.1] use-stmt
KEYWORD(NONINTRINSIC           , KEYALL)    // [11.2.1] module-nature

KEYWORD(EXTERNAL               , KEYALL)    // [12.3.2.2] external-stmt
KEYWORD(IMPORT                 , KEYALL)    // [12.3.2.1] import-stmt
KEYWORD(INTRINSIC              , KEYALL)    // [12.3.2.4] intrinsic-stmt

KEYWORD(KIND                   , KEYALL)
KEYWORD(LEN                    , KEYALL)

KEYWORD(READ                   , KEYALL)    // R910: read-stmt
KEYWORD(WRITE                  , KEYALL)    // R911: write-stmt
KEYWORD(PRINT                  , KEYALL)    // R912: print-stmt
KEYWORD(OPEN                   , KEYALL)
KEYWORD(CLOSE                  , KEYALL)
KEYWORD(INQUIRE                , KEYALL)
KEYWORD(BACKSPACE              , KEYALL)
KEYWORD(REWIND                 , KEYALL)

// [3.3.1] Blanks are optional in free source form for these keywords.
// BLOCK DATA:
KEYWORD(BLOCKDATA              , KEYALL)
// ELSE IF: 
KEYWORD(ELSEIF                 , KEYALL)
// DO WHILE
KEYWORD(DOWHILE                , KEYALL)
// END ASSOCIATE:
KEYWORD(ENDASSOCIATE           , KEYALL)
// END DO:
KEYWORD(ENDDO                  , KEYALL)
// END FILE:
KEYWORD(ENDFILE                , KEYALL)
// END FUNCTION:
KEYWORD(ENDFUNCTION            , KEYALL)
// END INTERFACE:
KEYWORD(ENDINTERFACE           , KEYALL)
// END PROGRAM:
KEYWORD(ENDPROGRAM             , KEYALL)
// END STRUCTURE:
KEYWORD(ENDSTRUCTURE           , KEYALL)
// END MAP:
KEYWORD(ENDMAP                 , KEYALL)
// END UNION:
KEYWORD(ENDUNION               , KEYALL)
// END SUBPROGRAM:
KEYWORD(ENDSUBPROGRAM          , KEYALL)
// END SUBROUTINE:
KEYWORD(ENDSUBROUTINE          , KEYALL)
// END WHERE:
KEYWORD(ENDWHERE               , KEYALL)
// IN OUT:
KEYWORD(INOUT                  , KEYALL)
// SELECT TYPE:
KEYWORD(SELECTTYPE             , KEYNOTF77)
// DOUBLE PRECISION:
KEYWORD(DOUBLEPRECISION        , KEYALL)
KEYWORD(DOUBLECOMPLEX          , KEYALL)
// ELSE WHERE:
KEYWORD(ELSEWHERE              , KEYALL)
// END BLOCK DATA:
KEYWORD(ENDBLOCKDATA           , KEYALL)
KEYWORD(ENDBLOCK               , KEYALL)
// END ENUM:
KEYWORD(ENDENUM                , KEYALL)
// END FORALL:
KEYWORD(ENDFORALL              , KEYNOTF77)
// END IF:
KEYWORD(ENDIF                  , KEYALL)
// END MODULE:
KEYWORD(ENDMODULE              , KEYNOTF77)
// END SELECT:
KEYWORD(ENDSELECT              , KEYALL)
// END TYPE:
KEYWORD(ENDTYPE                , KEYNOTF77)
// GO TO:
KEYWORD(GOTO                   , KEYALL)
// SELECT CASE:
KEYWORD(SELECTCASE             , KEYALL)
// DEFAULT
KEYWORD(DEFAULT                , KEYALL)
// CONTINUE
KEYWORD(CONTINUE               , KEYALL)
// STOP
KEYWORD(STOP                   , KEYALL)

// [3.2.4] R309: Intrinsic Operators
// [3.2.4] R713: rel-op
OPERATOR(EQ                    , KEYALL)
OPERATOR(NE                    , KEYALL)
OPERATOR(LT                    , KEYALL)
OPERATOR(LE                    , KEYALL)
OPERATOR(GT                    , KEYALL)
OPERATOR(GE                    , KEYALL)
// [3.2.4] R718: not-op
OPERATOR(NOT                   , KEYALL)
// [3.2.4] R719: and-op
OPERATOR(AND                   , KEYALL)
// [3.2.4] R720: or-op
OPERATOR(OR                    , KEYALL)
// [3.2.4] R721: equiv-op
OPERATOR(EQV                   , KEYALL)
OPERATOR(NEQV                  , KEYALL)

// [4.4.4] R424: logical-literal-constant
OPERATOR(TRUE                  , KEYALL)
OPERATOR(FALSE                 , KEYALL)

KEYWORD(UNIT                   , KEYALL)
KEYWORD(FMT                    , KEYALL)

// FIXME: correct language versions
// Fortran 2008 [10.3]
// R1007: data-edit-desc
FORMAT_SPEC(I                  , KEYALL)
FORMAT_SPEC(B                  , KEYALL)
FORMAT_SPEC(O                  , KEYALL)
FORMAT_SPEC(Z                  , KEYALL)
FORMAT_SPEC(F                  , KEYALL)
FORMAT_SPEC(E                  , KEYALL)
FORMAT_SPEC(EN                 , KEYALL)
FORMAT_SPEC(ES                 , KEYALL)
FORMAT_SPEC(G                  , KEYALL)
FORMAT_SPEC(L                  , KEYALL)
FORMAT_SPEC(A                  , KEYALL)
FORMAT_SPEC(D                  , KEYALL)
FORMAT_SPEC(DT                 , KEYALL)

// R1013: control-edit-desc (P)
FORMAT_SPEC(P                  , KEYALL)

// R1015: position-edit-desc
FORMAT_SPEC(T                  , KEYALL)
FORMAT_SPEC(TL                 , KEYALL)
FORMAT_SPEC(TR                 , KEYALL)
FORMAT_SPEC(X                  , KEYALL)

// R1017: sign-edit-desc
FORMAT_SPEC(SS                 , KEYALL)
FORMAT_SPEC(SP                 , KEYALL)
FORMAT_SPEC(S                  , KEYALL)

// R1018: blank-interp-edit-desc
FORMAT_SPEC(BN                 , KEYALL)
FORMAT_SPEC(BZ                 , KEYALL)

// R1019: round-edit-desc
FORMAT_SPEC(RU                 , KEYALL)
FORMAT_SPEC(RD                 , KEYALL)
FORMAT_SPEC(RZ                 , KEYALL)
FORMAT_SPEC(RN                 , KEYALL)
FORMAT_SPEC(RC                 , KEYALL)
FORMAT_SPEC(RP                 , KEYALL)

// R1020: decimal-edit-desc
FORMAT_SPEC(DC                 , KEYALL)
FORMAT_SPEC(DP                 , KEYALL)

#undef FORMAT_SPEC
#undef KEYWORD
#undef TOK
